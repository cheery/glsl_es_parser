variable_identifier:
    IDENTIFIER 
primary_expression:
    identifier(0) variable_identifier 
    constant(0)   INTCONSTANT 
    constant(0)   FLOATCONSTANT 
    constant(0)   BOOLCONSTANT 
    pass(1)       LEFT_PAREN expression RIGHT_PAREN 
postfix_expression:
    pass(0)       primary_expression 
    getindex(0 2) postfix_expression LEFT_BRACKET integer_expression RIGHT_BRACKET 
    call(0)       function_call 
    getattr(0 2)  postfix_expression DOT IDENTIFIER 
    post_incr(0)  postfix_expression INC_OP 
    post_decr(0)  postfix_expression DEC_OP 
integer_expression:
    expression 
function_call:
    function_call_generic 
function_call_generic:
    pass(0) function_call_header_with_parameters RIGHT_PAREN 
    pass(0) function_call_header_no_parameters RIGHT_PAREN 
function_call_header_no_parameters:
    pass(0) function_call_header VOID 
    pass(0) function_call_header 
function_call_header_with_parameters:
    append(0 1) function_call_header assignment_expression 
    append(0 2) function_call_header_with_parameters COMMA assignment_expression 
function_call_header:
    list(0) function_identifier LEFT_PAREN 
function_identifier:
    constructor_identifier 
    IDENTIFIER
constructor_identifier:
    FLOAT 
    INT 
    BOOL 
    VEC2 
    VEC3 
    VEC4 
    BVEC2
    BVEC3
    BVEC4
    IVEC2
    IVEC3
    IVEC4
    MAT2
    MAT3
    MAT4
    TYPE_NAME
unary_expression:
    postfix_expression 
    incr(1)    INC_OP unary_expression 
    incr(1)    DEC_OP unary_expression 
    unop(0 1) unary_operator unary_expression 
unary_operator:
    PLUS 
    DASH 
    BANG 
    TILDE
multiplicative_expression:
    unary_expression 
    binop(*) multiplicative_expression STAR unary_expression
    binop(*) multiplicative_expression SLASH unary_expression
    binop(*) multiplicative_expression PERCENT unary_expression
additive_expression:
    multiplicative_expression 
    binop(*) additive_expression PLUS multiplicative_expression 
    binop(*) additive_expression DASH multiplicative_expression 
shift_expression:
    additive_expression 
    binop(*) shift_expression LEFT_OP additive_expression
    binop(*) shift_expression RIGHT_OP additive_expression
relational_expression:
    shift_expression 
    binop(*) relational_expression LEFT_ANGLE shift_expression 
    binop(*) relational_expression RIGHT_ANGLE shift_expression 
    binop(*) relational_expression LE_OP shift_expression 
    binop(*) relational_expression GE_OP shift_expression 
equality_expression:
    relational_expression 
    binop(*) equality_expression EQ_OP relational_expression 
    binop(*) equality_expression NE_OP relational_expression 
and_expression:
    equality_expression 
    binop(*) and_expression AMPERSAND equality_expression
exclusive_or_expression:
    and_expression 
    binop(*) exclusive_or_expression CARET and_expression
inclusive_or_expression:
    exclusive_or_expression 
    binop(*) inclusive_or_expression VERTICAL_BAR exclusive_or_expression
logical_and_expression:
    inclusive_or_expression 
    binop(*) logical_and_expression AND_OP inclusive_or_expression
logical_xor_expression:
    logical_and_expression 
    binop(*) logical_xor_expression XOR_OP logical_and_expression 
logical_or_expression:
    logical_xor_expression 
    binop(*) logical_or_expression OR_OP logical_xor_expression 
conditional_expression:
    logical_or_expression 
    question(0 2 4) logical_or_expression QUESTION expression COLON assignment_expression 
assignment_expression:
    conditional_expression 
    assign(*) unary_expression assignment_operator assignment_expression 
assignment_operator:
    EQUAL 
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    ADD_ASSIGN 
    SUB_ASSIGN 
    LEFT_ASSIGN
    RIGHT_ASSIGN
    AND_ASSIGN
    XOR_ASSIGN
    OR_ASSIGN
expression:
    list(0)     assignment_expression 
    append(0 2) expression COMMA assignment_expression 
constant_expression:
    conditional_expression
declaration:
    pass(0)        function_prototype SEMICOLON 
    pass(0)        init_declarator_list SEMICOLON 
    precision(1 2) PRECISION precision_qualifier type_specifier_no_prec SEMICOLON
function_prototype:
    pass(0) function_declarator RIGHT_PAREN 
function_declarator:
    function_header 
    function_header_with_parameters 
function_header_with_parameters:
    append(0 1) function_header parameter_declaration 
    append(0 2) function_header_with_parameters COMMA parameter_declaration 
function_header:
    list(0 1) fully_specified_type IDENTIFIER LEFT_PAREN 
parameter_declarator:
    type_specifier IDENTIFIER 
    pass(0 1 3) type_specifier IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET 
parameter_declaration:
    type_qualifier parameter_qualifier parameter_declarator 
    parameter_qualifier parameter_declarator 
    type_qualifier parameter_qualifier parameter_type_specifier 
    parameter_qualifier parameter_type_specifier 
parameter_qualifier:
    IN 
    OUT 
    INOUT 
parameter_type_specifier:
    type_specifier 
    pass(0 2) type_specifier LEFT_BRACKET constant_expression RIGHT_BRACKET 
init_declarator_list:
    single_declaration 
    pass(0 2)   init_declarator_list COMMA IDENTIFIER 
    pass(0 2 4) init_declarator_list COMMA IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET
    pass(0 2 4) init_declarator_list COMMA IDENTIFIER EQUAL initializer 
single_declaration:
    fully_specified_type 
    fully_specified_type IDENTIFIER 
    pass(0 1 3) fully_specified_type IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET 
    fully_specified_type IDENTIFIER EQUAL initializer 
    INVARIANT IDENTIFIER
fully_specified_type:
    type_specifier 
    type_qualifier type_specifier 
type_qualifier:
    CONST 
    ATTRIBUTE
    VARYING 
    INVARIANT VARYING
    UNIFORM 
type_specifier:
    type_specifier_no_prec
    precision_qualifier type_specifier_no_prec
type_specifier_no_prec:
    VOID 
    FLOAT 
    INT 
    BOOL 
    VEC2 
    VEC3 
    VEC4 
    BVEC2 
    BVEC3 
    BVEC4 
    IVEC2 
    IVEC3 
    IVEC4 
    MAT2
    MAT3
    MAT4
    SAMPLER2D
    SAMPLERCUBE
    struct_specifier
    TYPE_NAME 
precision_qualifier:
    HIGHP
    MEDIUMP
    LOWP
struct_specifier:
    STRUCT IDENTIFIER LEFT_BRACE struct_declaration_list RIGHT_BRACE 
    STRUCT LEFT_BRACE struct_declaration_list RIGHT_BRACE 
struct_declaration_list:
    struct_declaration 
    struct_declaration_list struct_declaration 
struct_declaration:
    type_specifier struct_declarator_list SEMICOLON 
struct_declarator_list:
    struct_declarator 
    struct_declarator_list COMMA struct_declarator 
struct_declarator:
    IDENTIFIER 
    IDENTIFIER LEFT_BRACKET constant_expression RIGHT_BRACKET 
initializer:
    assignment_expression 
declaration_statement:
    declaration 
statement_no_new_scope:
    compound_statement_with_scope
    simple_statement 
simple_statement:
    declaration_statement 
    expression_statement 
    selection_statement 
    iteration_statement 
    jump_statement 
compound_statement_with_scope:
    list()  LEFT_BRACE RIGHT_BRACE 
    pass(1) LEFT_BRACE statement_list RIGHT_BRACE 
statement_with_scope:
    compound_statement_no_new_scope 
    simple_statement 
compound_statement_no_new_scope:
    list()  LEFT_BRACE RIGHT_BRACE 
    pass(1) LEFT_BRACE statement_list RIGHT_BRACE 
statement_list:
    list(0)     statement_no_new_scope
    append(0 1) statement_list statement_no_new_scope
expression_statement:
    list()  SEMICOLON 
    list(0) expression SEMICOLON 
selection_statement:
    IF LEFT_PAREN expression RIGHT_PAREN selection_rest_statement 
selection_rest_statement:
    statement_with_scope ELSE statement_with_scope 
    statement_with_scope
condition:
    expression 
    fully_specified_type IDENTIFIER EQUAL initializer 
iteration_statement:
    WHILE LEFT_PAREN condition RIGHT_PAREN statement_no_new_scope 
    DO statement_with_scope WHILE LEFT_PAREN expression RIGHT_PAREN SEMICOLON 
    FOR LEFT_PAREN for_init_statement for_rest_statement RIGHT_PAREN statement_no_new_scope 
for_init_statement:
    expression_statement 
    declaration_statement 
conditionopt:
    condition 
for_rest_statement:
    conditionopt SEMICOLON 
    conditionopt SEMICOLON expression 
jump_statement:
    CONTINUE SEMICOLON 
    BREAK SEMICOLON 
    RETURN SEMICOLON 
    RETURN expression SEMICOLON 
    DISCARD SEMICOLON
translation_unit:
    list(*)   external_declaration 
    append(*) translation_unit external_declaration 
external_declaration:
    function_definition 
    declaration 
function_definition:
    function_prototype compound_statement_no_new_scope
